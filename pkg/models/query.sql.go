// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertProxyInfoTestResults = `-- name: InsertProxyInfoTestResults :exec
insert into proxy_info (ip, port, protocol, provider, delay_ms, tested_at, websocket, anonymity, item_fetch)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9)
on conflict (ip, port, protocol) do update
    set delay_ms   = EXCLUDED.delay_ms,
        tested_at  = EXCLUDED.tested_at,
        websocket  = EXCLUDED.websocket,
        anonymity  = EXCLUDED.anonymity,
        item_fetch = EXCLUDED.item_fetch
`

type InsertProxyInfoTestResultsParams struct {
	Ip        string
	Port      int32
	Protocol  string
	Provider  pgtype.Text
	DelayMs   pgtype.Int4
	TestedAt  pgtype.Timestamp
	Websocket pgtype.Bool
	Anonymity pgtype.Bool
	ItemFetch pgtype.Bool
}

func (q *Queries) InsertProxyInfoTestResults(ctx context.Context, arg InsertProxyInfoTestResultsParams) error {
	_, err := q.db.Exec(ctx, insertProxyInfoTestResults,
		arg.Ip,
		arg.Port,
		arg.Protocol,
		arg.Provider,
		arg.DelayMs,
		arg.TestedAt,
		arg.Websocket,
		arg.Anonymity,
		arg.ItemFetch,
	)
	return err
}

const proxyInfoFetchError = `-- name: ProxyInfoFetchError :exec
update proxy_info
set fetch_error_count = fetch_error_count + 1
where ip = $1
  and port = $2
  and protocol = $3
`

type ProxyInfoFetchErrorParams struct {
	Ip       string
	Port     int32
	Protocol string
}

func (q *Queries) ProxyInfoFetchError(ctx context.Context, arg ProxyInfoFetchErrorParams) error {
	_, err := q.db.Exec(ctx, proxyInfoFetchError, arg.Ip, arg.Port, arg.Protocol)
	return err
}

const proxyInfoWebsocketDisconnect = `-- name: ProxyInfoWebsocketDisconnect :exec
update proxy_info
set websocket_error_count = websocket_error_count + 1
where ip = $1
  and port = $2
  and protocol = $3
`

type ProxyInfoWebsocketDisconnectParams struct {
	Ip       string
	Port     int32
	Protocol string
}

func (q *Queries) ProxyInfoWebsocketDisconnect(ctx context.Context, arg ProxyInfoWebsocketDisconnectParams) error {
	_, err := q.db.Exec(ctx, proxyInfoWebsocketDisconnect, arg.Ip, arg.Port, arg.Protocol)
	return err
}
